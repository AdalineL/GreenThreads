globals [
  sky-top
  total-patches
  gray-transparent
  brown-transparent
  yellow-transparent
  black-transparent
  sky-transparent
  white-transparent
  angle-radians
  runoff-acc
  infilt-acc
  kSat ; shows clay-silt-sand ratio
  kSat-prob
  rain-prob
  slope-prob
  prev-slope
  runoff-prob
]

breed [drops drop]     ;; droplets of rain
turtles-own [ has-encountered-soil ]

to setup
  clear-all
;  orbit-down 70
;  orbit-left 60

  setup-world

  set kSat 40 ;TO CHANGE, PRINT FOR OUTPUT

  let output kSat
  set prev-slope 0
  set-default-shape drops "line"
  set total-patches count patches ;; resets patches
  set gray-transparent [169 169 169 30] ;; RGB value, then transparency
  set brown-transparent [150 75 0 30]
  set yellow-transparent [255 255 0 30]
  set black-transparent [0 0 0 30]
  set sky-transparent [200 100 0 30]
  set white-transparent [255 255 255 30]
  set-soil-type;
  set angle-radians slope-angle * (pi / 180)
  distribute-colors ;; set up soil composition
;  add-water-source ;; add water on top face
  run-rain
  reset-ticks
end

to go
  run-rain
  setup-world
;  distribute-colors
  if (prev-slope != slope-angle) [
    update-runoff-prob
    set angle-radians slope-angle * (pi / 180)
    distribute-colors
    update-runoff
    set prev-slope slope-angle  ; Update the previous slope angle
  ]
  update-output
;  display
  tick
end

to update-output
  clear-output
  output-print (word kSat)
;  output-print (word "kSat prob = " kSat-prob)
;  output-print (word "slope prob = " slope-prob) ; TEMPORARY FOR DEBUGGING
;  output-print (word "rain prob = " rain-prob) ; TEMPORARY FOR DEBUGGING
;  output-print (word "runoff prob = " runoff-prob) ; TEMPORARY FOR DEBUGGING
end

to setup-world
  ; let m tan slope-angle * (pi / 180) ; keep in radians

  set sky-top max-pycor - 5
  let bg-patches patches with [pzcor = min-pzcor]

  ask bg-patches [  ;; set colors for the different sections of the world
    if pycor > sky-top and pycor <= max-pycor[  ;; space
      set pcolor scale-color white pycor 50 10
    ]
    if pycor <= sky-top [ ;; sky
      set pcolor scale-color blue pycor -20 20
    ]
    set angle-radians slope-angle * (pi / 180)
    if pycor < (angle-radians * pxcor)  ;; soil, with slope
        [set pcolor brown]
;    if pycor = (angle-radians * pxcor) ;; earth surface (NOT WORKING)
;      [ set pcolor red]
  ]
end

to reset-ratios-111
  set clay 33.3
  set silt 33.3
  set sand 33.4
end

to reset-ratios-122
  set clay 20.0
  set silt 40.0
  set sand 40.0
end

to set-soil-type
  if soil-type = "tClay" [
    set clay 80.0
    set silt 10.0
    set sand 10.0
  ] if soil-type = "Sandy-Clay" [
    set clay 45.0
    set silt 5.0
    set sand 50.0
  ] if soil-type = "Sandy-Clay-Loam" [
    set clay 30.0
    set silt 10.0
    set sand 60.0
  ] if soil-type = "Sandy-Loam" [
    set clay 10.0
    set silt 20.0
    set sand 70.0
  ] if soil-type = "Loamy-Sand" [
    set clay 5.0
    set silt 15.0
    set sand 80.0
  ] if soil-type = "tSand" [
    set clay 5.0
    set silt 5.0
    set sand 90.0
  ] if soil-type = "Loam" [
    set clay 20.0
    set silt 40.0
    set sand 40.0
  ] if soil-type = "Clay-Loam" [
    set clay 35.0
    set silt 35.0
    set sand 30.0
  ] if soil-type = "Silty-Clay" [
    set clay 50.0
    set silt 45.0
    set sand 5.0
  ] if soil-type = "Silty-Clay-Loam" [
    set clay 35.0
    set silt 55.0
    set sand 10.0
  ] if soil-type = "Silt-Loam" [
    set clay 15.0
    set silt 65.0
    set sand 20.0
  ] if soil-type = "tSilt" [
    set clay 5.0
    set silt 90.0
    set sand 5.0
  ] if soil-type = "sliders" [
    set clay clay
    set silt silt
    set sand sand
  ]
end


to distribute-colors
;  let midpoint (earth-top - 1)
  ; Apply to just soil patches
  set angle-radians slope-angle * (pi / 180)
  let soil-colors (list gray-transparent brown-transparent yellow-transparent)

  let bottom-patches patches with [pycor < (angle-radians * pxcor)]
  let total-bottom-patches count bottom-patches

  ; Wwhere soil not is (for live)
  let empty-bottom-patches bottom-patches with [not member? pcolor soil-colors]
  let empty-count count empty-bottom-patches

  ; Current Counts
  let current-clay-count count patches with [pcolor = gray-transparent]
  let current-silt-count count patches with [pcolor = brown-transparent]
  let current-sand-count count patches with [pcolor = yellow-transparent]

  ; Desired Counts
  let desired-clay-count round ((clay / 100) * total-bottom-patches)
  let desired-silt-count round ((silt / 100) * total-bottom-patches)
  let desired-sand-count total-bottom-patches - desired-clay-count - desired-silt-count

  ; Adjust each soil types
  adjust-soil-type empty-bottom-patches desired-clay-count current-clay-count gray-transparent
  adjust-soil-type empty-bottom-patches desired-silt-count current-silt-count brown-transparent
  adjust-soil-type empty-bottom-patches desired-sand-count current-sand-count yellow-transparent

  ; clear patches above soil slope line
  let above-mx-line patches with [pycor >= (angle-radians * pxcor) and member? pcolor soil-colors]
  ask above-mx-line [ set pcolor [0 0 0 0] ]



  ;include organic matter
  let soil-patches (patches with [member? pcolor soil-colors])

;  let shuffled-soil-patches (shuffle (sort soil-patches))

  let org-count round ((org_matter / 100) * (count soil-patches))

  if (org-count > 0) [
    ask n-of org-count soil-patches [
      set pcolor black  ; Assuming black represents organic matter
      ; set shape "circle" if desired
    ]
  ]
end

to adjust-soil-type [patches-to-adjust desired-total-count current-count my-color]
  ; This procedure adjusts the number of patches of a given soil type
  let adjustment-count desired-total-count - current-count
  if adjustment-count > 0 [
    ; If more patches of this soil type are needed
    let patches-to-change n-of adjustment-count patches-to-adjust
    ask patches-to-change [ set pcolor my-color ]
  ]
  if adjustment-count < 0 [
    ; If there are too many patches of this soil type
    let patches-to-change n-of (- adjustment-count) (patches with [pcolor = my-color])
    ask patches-to-change [ set pcolor [0 0 0 0] ] ; Clearing them to background color
  ]
end

;to distribute-colors
;;  let midpoint (earth-top - 1)
;  ; Apply to just soil patches
;  ; let m tan slope-angle * (pi / 180) ; keep in radians
;  let bottom-patches patches with [pycor < (angle-radians * pxcor)]
;  let total-bottom-patches count bottom-patches
;
;
;  ; Calculate the number of patches for clay, silt, and sand
;  let clay-count round ((clay / 100) * total-bottom-patches)
;  let silt-count round ((silt / 100) * total-bottom-patches)
;  let sand-count total-bottom-patches - clay-count - silt-count
;
;  ; Convert the agentset of all patches to a list and shuffle it
;  let shuffled-bottom-patches shuffle (sort bottom-patches)
;
;  ; Assign colors based on the shuffled list and calculated counts
;  ; colors are transparent so you can see water flowing through
;  let index 0
;  while [index < clay-count] [
;    ask item index shuffled-bottom-patches [ set pcolor gray-transparent ]
;    set index index + 1
;  ]
;  while [index < clay-count + silt-count] [
;    ask item index shuffled-bottom-patches [ set pcolor brown-transparent ]
;    set index index + 1
;  ]
;  while [index < total-bottom-patches] [
;    ask item index shuffled-bottom-patches [ set pcolor yellow-transparent ]
;    set index index + 1
;  ]
;
;
;  let org-count round ((org_matter / 100) * total-bottom-patches)
;  let org_index 0
;
;  while [org_index < org-count] [
;    ask item org_index shuffled-bottom-patches [
;      set pcolor black
;;      set shape "circle"
;    ]
;    set org_index org_index + 1
;  ]
;end

;to add-water-source
;  ; add water source on the top face
;  ask patches with [pycor > (max-pycor - 2)] [
;    set pcolor blue
;  ]
;end
;
;
;to flow-water
;  ; Simulate water flowing down through the soil in 3D
;;  let saturated-count count patches with [pcolor = blue]
;;  let target-saturated floor (total-patches * rainfall)
;;
;;  if saturated-count >= target-saturated [ stop ]
;
;  wait 0.05
;
;  ask patches with [pcolor = blue] [
;    let below patch-at 0 -1 0
;    let porosityChance 0  ; Determine chance based on soil type
;    if (below != nobody) [
;      if[pcolor] of below = gray-transparent
;      [ set porosityChance 0.25 ]
;      if [pcolor] of below = brown-transparent
;        [ set porosityChance 0.3 ]
;      ifelse [pcolor] of below = yellow-transparent
;        [ set porosityChance 0.7 ]  ; Sand has the highest chance
;      [ set porosityChance 1 ]
;
;      if random-float 1 < porosityChance * rainfall [
;        ask below [ set pcolor blue ]  ; Water moves to this patch
;      ]
;    ]
;  ]
;end

to run-rain
  ask drops [
    ifelse (pxcor <= min-pxcor or pxcor >= max-pxcor or pzcor <= min-pzcor or pzcor >= max-pzcor or pycor <= min-pycor or pycor >= max-pycor)
    [ die ]
    [ fd 0.3 ]
  ]
  create-rain
  encounter-soil
end

to create-rain
  ;; don't create rain at each tick
  ;; as rain increases, make more
  if 10 * rain > random 50 [
    create-drops 1 [
      set heading 160
      set color blue
      setxyz  random-xcor max-pycor - 1 random-zcor
      set has-encountered-soil false
    ]
  ]
end

to encounter-soil
  ; let m tan slope-angle * (pi / 180) ; keep in radians
  update-runoff-prob
  let runoff runoff-prob

  ask drops [
    if not has-encountered-soil and ycor < ((angle-radians * xcor)+ 1.5) [
      set has-encountered-soil true
      ifelse 100 * runoff > random 100
      [ set color green ; runoff
        set runoff-acc (runoff-acc + 1)
        ifelse slope-angle < 0 ; if negative slope, flow downwards
        [set heading (90 - slope-angle)]
        [set heading (270 - slope-angle)]
        ]
      [ fd 0.01 ; infiltration slows down
        set infilt-acc (infilt-acc + 1)
        set color red
        set heading 180
;        ifelse slope-angle < 0 ; if negative slope, flow downwards
;        [set heading (135 - slope-angle)]
;        [set heading (225 - slope-angle)]
        ]
    ]
  ]
end

to update-runoff
  set angle-radians slope-angle * (pi / 180)  ; Convert slope angle to radians
  ask drops with [color = green] [
    ; Check if the drop is below the new slope line
    ifelse (ycor < (angle-radians * xcor + 1.5)) [
      die  ; Delete the drop
    ] [
      ; Adjust heading based on whether the slope angle is positive or negative
      ifelse slope-angle < 0 [
        set heading (90 - slope-angle)  ; For negative slopes
      ] [
        set heading (270 - slope-angle)  ; For positive slopes
      ]
    ]
  ]
end

to update-kSat-prob
  ifelse kSat <= 5 [
    set kSat-prob 0.1
  ] [ ifelse kSat <= 10 [
      set kSat-prob 0.2
    ] [ ifelse kSat <= 20 [
        set kSat-prob 0.3
      ] [ ifelse kSat <= 30 [
          set kSat-prob 0.4
        ] [ ifelse kSat <= 40 [
            set kSat-prob 0.5
          ] [ ifelse kSat <= 50 [
              set kSat-prob 0.6
            ] [ ifelse kSat <= 75 [
                set kSat-prob 0.7
              ] [ ifelse kSat <= 90 [
                  set kSat-prob 0.8
                ] [
                  set kSat-prob 0.85
  ]]]]]]]]
end

to update-slope-prob
  let abs-slope abs slope-angle  ; Get the absolute value of the slope angle

  ifelse abs-slope >= 50 [
    set slope-prob 0.9
  ] [ ifelse abs-slope >= 40 [
      set slope-prob 0.8
      ] [ ifelse abs-slope >= 30 [
        set slope-prob 0.7
        ] [ ifelse abs-slope >= 20 [
          set slope-prob 0.6
          ] [ ifelse abs-slope >= 10 [
            set slope-prob 0.5
          ] [
            set slope-prob 0.4
  ]]]]]
end

to update-rain-prob
  ifelse rain <= 0.5 [
    set rain-prob 0.1
    ] [ ifelse rain <= 1.0 [
      set rain-prob 0.2
      ] [ ifelse rain <= 1.5 [
        set rain-prob 0.3
        ] [ ifelse rain <= 2.0 [
          set rain-prob 0.4
          ] [ ifelse rain <= 2.5 [
            set rain-prob 0.5
            ] [ ifelse rain <= 3.0 [
              set rain-prob 0.6
              ] [ ifelse rain <= 3.5 [
                set rain-prob 0.7
                ] [ ifelse rain <= 4.0 [
                  set rain-prob 0.8
                  ] [ ifelse rain <= 4.5 [
                    set rain-prob 0.9
                  ] [
                    set rain-prob 1.0
  ]]]]]]]]]
end

to update-runoff-prob
  update-kSat-prob
  update-slope-prob
  update-rain-prob
  ; Weights according to the ratio 3:2:1
  let weight-kSat 3
  let weight-rain 2
  let weight-slope 1

  ; Calculate weighted probabilities
  let weighted-kSat kSat-prob * weight-kSat
  let weighted-rain rain-prob * weight-rain
  let weighted-slope slope-prob * weight-slope

  ; Calculate the sum of the weights
  let total-weight weight-kSat + weight-rain + weight-slope

  ; Calculate weighted average of probabilities
  let weighted-average (weighted-kSat + weighted-rain + weighted-slope) / total-weight

  ; Compute runoff probability
  set runoff-prob (1 - weighted-average)
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
541
542
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-20
20
-20
20
-20
20
1
0
1
ticks
30.0

SLIDER
281
65
453
98
clay
clay
0.0
100.0
20.0
0.5
1
%
HORIZONTAL

SLIDER
280
127
452
160
silt
silt
0.0
100.0
40.0
0.5
1
%
HORIZONTAL

SLIDER
280
189
452
222
sand
sand
0.0
100.0
40.0
0.5
1
%
HORIZONTAL

BUTTON
500
158
563
191
go
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
499
97
565
130
setup
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

TEXTBOX
15
17
325
73
1) Set your ratios (using buttons or soil-type selector)\n2) Press setup\n3) Press go
11
0.0
1

CHOOSER
179
243
338
288
soil-type
soil-type
"sliders" "tClay" "Sandy-Clay" "Sandy-Clay-Loam" "Sandy-Loam" "Loamy-Sand" "tSand" "Loam" "Clay-Loam" "Silty-Clay" "Silty-Clay-Loam" "Silt-Loam" "tSilt"
7

SLIDER
62
65
234
98
org_matter
org_matter
0
5
3.0
1
1
NIL
HORIZONTAL

SLIDER
62
127
234
160
slope-angle
slope-angle
-60
60
-5.0
1
1
NIL
HORIZONTAL

SLIDER
61
189
233
222
rain
rain
0
5.0
4.5
0.5
1
NIL
HORIZONTAL

PLOT
61
308
440
533
Rain Accumulation
ticks
amt
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"runoff" 1.0 0 -10899396 true "" "plot runoff-acc"
"infiltration" 1.0 0 -2674135 true "" "plot infilt-acc"

OUTPUT
488
329
558
361
13

TEXTBOX
492
311
642
329
kSat Value
13
0.0
1

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300
Rectangle -7500403 true true 120 0 180 315
Rectangle -7500403 true true 90 0 210 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.4.0
@#$#@#$#@
need-to-manually-make-preview-for-this-model
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
